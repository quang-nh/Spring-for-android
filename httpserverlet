package fjn.vn.fjnairdroid.server;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.text.format.Formatter;
import android.util.Log;

import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHolder;

import fjn.vn.fjnairdroid.servlet.FileServlet;
import fjn.vn.fjnairdroid.servlet.SmsServlet;

/**
 * Created by quang-nh on 2017/04/03.
 * ${name} define process of ...
 */

public class MyHttpServer {
    ServletContextHandler handler;
    Server server;
    Context context;

    /**
     * Due to a bug in Android 2.x, it is recommended that you
     * do this. I have seen the bug only on the emulators.
     */
    static{
        if(Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB){
            System.setProperty(
                    "java.net.preferIPv6Addresses"
                    , "false");
        }
    }

    /**
     * Create the jetty server and let it listen at port 8080
     */
    public MyHttpServer(Context context){

        this.context=context;

        server=new Server(8080); // The port is being set here
        handler=new ServletContextHandler();
        handler.setContextPath("/");
        handler.addServlet(
                new ServletHolder(
                        new SmsServlet(this.context)),"/sms");
        handler.addServlet(
                new ServletHolder(
                        new FileServlet(this.context)),"/file");
        server.setHandler(handler);
    }

    /*
     * We better run the server in a separate thread.
     */
    public void start(){
        new Thread(){
            public void run(){
                try{
                    server.start();
                }catch(Exception e){
                    Log.e("SERVER_START",e.toString());
                }
            }
        }.start();
    }

    public void stop(){
        try{
            server.stop();
        }catch(Exception e){
            Log.e("SERVER_STOP",e.toString());
        }
    }

    public String getIPAddress(){
        ConnectivityManager con;
        con = (ConnectivityManager)context
                .getSystemService(Context.CONNECTIVITY_SERVICE);
        if(con.getNetworkInfo(
                ConnectivityManager.TYPE_WIFI)
                .isConnected()){
            WifiManager wifi;
            wifi=(WifiManager)context
                    .getSystemService(Context.WIFI_SERVICE);
            int ip=wifi.getConnectionInfo().getIpAddress();
            return Formatter.formatIpAddress(ip);
        }else{
            return "You are not connected to WIFI";
        }
    }



}
